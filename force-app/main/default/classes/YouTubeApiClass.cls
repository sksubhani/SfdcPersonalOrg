//
// Generated by JSON2Apex http://JSON2Apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class YouTubeApiClass {

	public class PageInfo {
		public Integer totalResults {get;set;} 
		public Integer resultsPerPage {get;set;} 

		public PageInfo(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'totalResults') {
							totalResults = parser.getIntegerValue();
						} else if (text == 'resultsPerPage') {
							resultsPerPage = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'PageInfo consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String kind {get;set;} 
	public String etag {get;set;} 
	public PageInfo pageInfo {get;set;} 
	public List<Items> items {get;set;} 

	public YouTubeApiClass(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'kind') {
						kind = parser.getText();
					} else if (text == 'etag') {
						etag = parser.getText();
					} else if (text == 'pageInfo') {
						pageInfo = new PageInfo(parser);
					} else if (text == 'items') {
						items = arrayOfItems(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'YouTubeApiClass consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Default_Z {
		public String url {get;set;} 
		public Integer width {get;set;} 
		public Integer height {get;set;} 

		public Default_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'url') {
							url = parser.getText();
						} else if (text == 'width') {
							width = parser.getIntegerValue();
						} else if (text == 'height') {
							height = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Default_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Thumbnails {
		public Default_Z default_Z {get;set;} // in json: default
		public Default_Z medium {get;set;} 
		public Default_Z high {get;set;} 

		public Thumbnails(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'default') {
							default_Z = new Default_Z(parser);
						} else if (text == 'medium') {
							medium = new Default_Z(parser);
						} else if (text == 'high') {
							high = new Default_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Thumbnails consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Items {
		public String kind {get;set;} 
		public String etag {get;set;} 
		public String id {get;set;} 
		public Snippet snippet {get;set;} 
		public Statistics statistics {get;set;} 

		public Items(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'kind') {
							kind = parser.getText();
						} else if (text == 'etag') {
							etag = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'snippet') {
							snippet = new Snippet(parser);
						} else if (text == 'statistics') {
							statistics = new Statistics(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Items consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Snippet {
		public String title {get;set;} 
		public String description {get;set;} 
		public String customUrl {get;set;} 
		public String publishedAt {get;set;} 
		public Thumbnails thumbnails {get;set;} 
		public Localized localized {get;set;} 
		public String country {get;set;} 

		public Snippet(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'title') {
							title = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'customUrl') {
							customUrl = parser.getText();
						} else if (text == 'publishedAt') {
							publishedAt = parser.getText();
						} else if (text == 'thumbnails') {
							thumbnails = new Thumbnails(parser);
						} else if (text == 'localized') {
							localized = new Localized(parser);
						} else if (text == 'country') {
							country = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Snippet consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Statistics {
		public String viewCount {get;set;} 
		public String commentCount {get;set;} 
		public String subscriberCount {get;set;} 
		public Boolean hiddenSubscriberCount {get;set;} 
		public String videoCount {get;set;} 

		public Statistics(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'viewCount') {
							viewCount = parser.getText();
						} else if (text == 'commentCount') {
							commentCount = parser.getText();
						} else if (text == 'subscriberCount') {
							subscriberCount = parser.getText();
						} else if (text == 'hiddenSubscriberCount') {
							hiddenSubscriberCount = parser.getBooleanValue();
						} else if (text == 'videoCount') {
							videoCount = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Statistics consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Localized {
		public String title {get;set;} 
		public String description {get;set;} 

		public Localized(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'title') {
							title = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Localized consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static YouTubeApiClass parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new YouTubeApiClass(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	






    private static List<Items> arrayOfItems(System.JSONParser p) {
        List<Items> res = new List<Items>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Items(p));
        }
        return res;
    }







}